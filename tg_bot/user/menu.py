from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from tg_bot.user.localizations.get_localizations import getText, getTextByLang
from tg_bot.user import keyboards
from tg_bot.user import filters
from tg_bot.user import states

menu_router = Router()

async def start(msg, state):
    await msg.answer(
        ("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –∫–æ–º–∞–Ω–¥—ã –ë–ú–ï–ü–ü –£—Ä–§–£, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"
        " –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—é –≤–µ–∫—Ç–æ—Ä–∞ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω –∞–∫—Ç–∏–≤–æ–≤"),
        reply_markup=await keyboards.menu.showMenu(state)
    )

@menu_router.message(Command("start"))
async def startMsg(msg: Message, state: FSMContext):
    await state.update_data({"language": "ru"})

    await start(msg, state)

@menu_router.message(F.text == "ENGüá∫üá∏")
async def chooseEn(msg: Message, state: FSMContext):
    await state.update_data({"language": "en"})
    await start(msg, state)

@menu_router.message(F.text == "–†–£–°üá∑üá∫")
async def chooseRu(msg: Message, state: FSMContext):
    await state.update_data({"language": "ru"})
    await start(msg, state)

@menu_router.message(F.text == "–û –Ω–∞—Å")
async def showAboutMsg(msg: Message, state: FSMContext):
    await msg.answer(
        ("–ì–ª–∞–≤–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @nadpis_ne_imeet_smysla\n"
        "–¢–∏–º–ª–∏–¥: @deshp666\n"
        "–ê–Ω–∞–ª–∏—Ç–∏–∫: @uzkate\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @n1nja147\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @Terafybo\n")
    )

@menu_router.message(F.text == "–ê–Ω–∞–ª–∏–∑")
async def showAnalysisMsg(msg: Message, state: FSMContext):
    await msg.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É",
        reply_markup=await keyboards.menu.showAnalysisMenu(state)
    )
    await state.set_state(states.Menu.choose_ticker)
